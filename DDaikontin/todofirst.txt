Change inactiveEnemies to a sector-based list (List<List<ShipBase>[]> indexed by regionID and sector) and reactivate them when the sector doesn't need regenerated
 - But do we want to tether enemies to the sector that spawned them, or do we want to recalculate what sector they're in when it gets deactivated and also deactivate them if they leave the sector?

May as well occasionally remove the colliders from bullets that are too far away for the player to contact them during their lifetime. (Estimate as xdiff or ydiff > lifetime * (player max speed + bullet speed))
 - To do this as well as possible: have a "check in X frames" variable for each physics object; when checking for collisions, if this is nonzero, only decrement it; otherwise, set this based on how long it would take for something to reach it the soonest (Math.Min(distance to each object divided by that object's max speed))

Implement mouse controls. Reconsider how I did GetKeyState--it'd be great if there were a shorter syntax.
Implement joystick controls. Implement control customization.
Come up with some meta-game. Maybe rare enemies that spawn certain distances out could drop permanent, persistent (minor) upgrades?
Finish the networking and test it. (Also make sure it doesn't send a message if the frame hasn't passed)
 - Spawn delay should be same as the max lag? May have to increase sector size because of that--spawning and moving from inactive lists to active lists should be based on a delay so both players stay in sync better.
 - Find a solution to the problem of "currentPlayer" being the center of the universe

More UI components (health bar, player lives, score, multiplayer stuff)



New concepts:

enemies stronger as you get farther out, but we can't spawn all at once -> layout like a hard disk drive
 - also allowed stashing enemies in separate inactive lists for later O(1) lookup if you get away from them
 - enemies generated randomly at each angle step within the arc
starry background
 - no memory required; regenerates pseudo-random based on gridified X and Y plus a seed that is set at startup
 - generates a random number of stars at random locations within each grid segment
networking
 - must have a random generator that only updates once per frame so we don't have to sync it constantly
   - also prevents cascading desync due to random events causing more random number pulls
 - should avoid things like enemy spawns happening quickly in response to player action
 - basically only have to send changes caused by player input, and can recalculate relevant info to sync
 - send version info, random generator, and frame counter at connect time 
 - each peer trusts the other fully but doesn't receive info about his own ship
timing
 - estimates required time to draw graphics using a moving average
 - only draws if there is enough leftover time estimated; skips 8 frames max
delegates
 - Core allows other to set Actions within it that it then calls at certain times
